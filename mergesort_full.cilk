/*
 * Modified Parallel Mergesort Algorithm By: 
 * Noha Abuaesh, in April 25th, 2013, 01:06 PM 
 * 
 * Original Mergesort Algorithm C-Implementation from: 
 * http://p2p.wrox.com/visual-c/66348-merge-sort-c-source-code.html 
 * By: yulin11, in March 3rd, 2008, 02:51 AM
 * 
 */

#include <cilk-lib.cilkh>
#include <stdlib.h>
#include <stdio.h>
int n; //the size of the array

cilk void merge(int* numbers, int* temp, int p1, int v1, int p2, int v2)
{
  int n1, n2, q1, q2, tmp_pos, i;

  n1 = v1 - p1 + 1;
  n2 = v2 - p2 + 1;

  /*printf("\n\nCalled on:\n--------\n");
  printf("Array 1: [%d , %d]\n", p1, v1);
  printf("Array 2: [%d , %d]\n", p2, v2);*/

  if(n1 <= 0)//1st array got empty; copy contents of 2nd array as is
  {
    //printf("1st array got empty...\n");
    if(n2 > 0)
      for(i = p2; i <= v2; i++) temp[i] = numbers[i];
    return;
  }
  if(n2 <= 0)//2nd array got empty; copy contents of 1st array as is
  {
    //printf("2nd array got empty...\n");
    if(n1 > 0)
      for(i = v1; i >= p1; i--) temp[n-i-1] = numbers[i];
    return;
  }

  if(n1 < n2) //swap arrays
  {
    tmp_pos = n1;
    n1 = n2;
    n2 = tmp_pos;
    
    tmp_pos = p1;
    p1 = p2;
    p2 = tmp_pos;

    tmp_pos = v1;
    v1 = v2;
    v2 = tmp_pos;
  }

  q1 = (p1+v1)/2;

  //search for q2--sequentially
  for(q2 = p2; q2 <= v2; q2++)
    if(numbers[q2] >= numbers[q1]) break;


  temp[q1+q2-p2] = numbers[q1];

  /*printf("Placed %dth element from numbers into %dth element in temp.\n", q1, q1+q2-p2);
  printf("Next Recursive Call...\n");*/

  spawn merge(numbers, temp, p1, q1-1, p2, q2-1);
  spawn merge(numbers, temp, q1+1, v1, q2, v2);
  sync;
}

cilk void m_sort(int* numbers, int* temp, int p1, int v2)
{
  int v1, p2;
 
  if (v2 > p1)
  {
    v1 = (v2 + p1) / 2;
    p2 = v1 + 1;
    spawn m_sort(numbers, temp, p1, v1);
    spawn m_sort(numbers, temp, p2, v2);
    sync;

    spawn merge(numbers, temp, p1, v1, p2, v2);
    sync;
    
  }
}

cilk int main(int argc, char *argv[])
{
     int *a, *b, i;

     if (argc != 2) {
	  fprintf(stderr, "Usage: mergesort [<cilk options>] <n>\n");
	  Cilk_exit(1);
     }
     //Size of the array : n
     n = atoi(argv[1]);
     
     /* alloc memory */
     if ((a = malloc(n * sizeof(int))) == NULL)
	   return 3;
     if ((b = malloc(n * sizeof(int))) == NULL)
	   return 3;
     /* fill array will numbers in range [0, 100) */
     for (i = 0; i < n; i++)
	  a[i] = 100 * ((float) rand() / ((float) RAND_MAX + 1));

     /* print array elements before sorting*/
     /*printf("\nOriginal Array: \n");
     for (i = 0; i < n; i++)
	  printf("%d  ", a[i]);*/

     /* sort array elements*/
     spawn m_sort(a, b, 0, n-1);
     sync;

    /* print array elements after sorting*/
     /*printf("\nSorted Array: \n");
     for (i = 0; i < n; i++)
	  printf("%d  ", b[i]);*/
     
     printf("\n\n");
     free(a);
     free(b);
     return 0;
}
